initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0); // neutral
	initializeMutationType("m2", 0.5, "e", 0.05); // deleterious in p2
	initializeGenomicElementType("g1", c(m1,m2), c(0.99,0.01));
	initializeGenomicElement(g1, 0, 99999);
	initializeRecombinationRate(1e-8);
}
fitness(m2, p1) { return 1/relFitness; }
1 {
	sim.addSubpop("p1", 50);
	sim.addSubpop("p2", 500);
	p1.setMigrationRates(c(p2),c(mig1));
	p2.setMigrationRates(c(p1),c(mig2));
}
10000 { sim.simulationFinished(); }
10000 late() {
	// Calculate mean nucleotide heterozygosity across the population
	total = 0.0;
	for (ind in p1.individuals)
	{
		// Calculate the nucleotide heterozygosity of this individual
		muts0 = ind.genomes[0].mutations;
		muts1 = ind.genomes[1].mutations;
		// Count the shared mutations
		shared_count = sum(match(muts0, muts1) >= 0);
		// All remaining mutations are unshared (i.e. heterozygous)
		unshared_count = muts0.size() + muts1.size() - 2 * shared_count;
		// pi is the mean heterozygosity across the chromosome
		pi_ind = unshared_count / (sim.chromosome.lastPosition + 1);
		total = total + pi_ind;
	}
	pi = total / p1.individuals.size();
	line = paste(pi);
	cat("Mean nucleotide heterozygosity of p1 = " + pi + "\n");
	writeFile("~/Dropbox/SLiM_tutorial/output.txt", line, append=T);
}
